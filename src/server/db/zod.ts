// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./schema/default";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const emoteVisibilitySchema = z.union([
  z.literal("public"),
  z.literal("private"),
]);

export const emoteInsertSchema = z.object({
  created_at: z.string().optional(),
  emoji: z.string(),
  id: z.string().optional(),
  is_pro: z.boolean().optional(),
  name: z.string(),
  user_id: z.string().optional().nullable(),
  visibility: emoteVisibilitySchema.optional(),
});

export const emoteUpdateSchema = z.object({
  created_at: z.string().optional(),
  emoji: z.string().optional(),
  id: z.string().optional(),
  is_pro: z.boolean().optional(),
  name: z.string().optional(),
  user_id: z.string().optional().nullable(),
  visibility: emoteVisibilitySchema.optional(),
});

export const emoteRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("emote_created_by_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const formStatusSchema = z.union([
  z.literal("active"),
  z.literal("inactive"),
]);

export const formInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  status: formStatusSchema.optional(),
  user_id: z.string(),
});

export const formUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  status: formStatusSchema.optional(),
  user_id: z.string().optional(),
});

export const formRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("form_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const formEmoteRowSchema = z.object({
  created_at: z.string(),
  emote_id: z.string(),
  form_id: z.string(),
  id: z.string(),
});

export const formEmoteInsertSchema = z.object({
  created_at: z.string().optional(),
  emote_id: z.string(),
  form_id: z.string(),
  id: z.string().optional(),
});

export const formEmoteUpdateSchema = z.object({
  created_at: z.string().optional(),
  emote_id: z.string().optional(),
  form_id: z.string().optional(),
  id: z.string().optional(),
});

export const formEmoteRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("form_emote_emote_id_fkey"),
    columns: z.tuple([z.literal("emote_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("emote"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("form_emote_emote_id_fkey"),
    columns: z.tuple([z.literal("emote_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("emote_option"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("form_emote_form_id_fkey"),
    columns: z.tuple([z.literal("form_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("form"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reactionRowSchema = z.object({
  created_at: z.string(),
  form_emote_id: z.string(),
  id: z.string(),
  user_id: z.string().nullable(),
});

export const reactionInsertSchema = z.object({
  created_at: z.string().optional(),
  form_emote_id: z.string(),
  id: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const reactionUpdateSchema = z.object({
  created_at: z.string().optional(),
  form_emote_id: z.string().optional(),
  id: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const reactionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reaction_form_emote_id_fkey"),
    columns: z.tuple([z.literal("form_emote_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("form_emote"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reaction_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userMembershipSchema = z.union([
  z.literal("free"),
  z.literal("pro"),
]);

export const userInsertSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.string(),
  image: z.string().optional().nullable(),
  membership: userMembershipSchema.optional(),
  name: z.string(),
});

export const userUpdateSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.string().optional(),
  image: z.string().optional().nullable(),
  membership: userMembershipSchema.optional(),
  name: z.string().optional(),
});

export const userRelationshipsSchema = z.tuple([]);

export const emoteOptionRowSchema = z.object({
  created_at: z.string().nullable(),
  emoji: z.string().nullable(),
  form_id: z.array(z.string()).nullable(),
  id: z.string().nullable(),
  is_pro: z.boolean().nullable(),
  name: z.string().nullable(),
  user_id: z.string().nullable(),
  visibility: emoteVisibilitySchema.nullable(),
});

export const emoteOptionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("emote_created_by_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const projectStatusSchema = z.union([
  z.literal("active"),
  z.literal("inactive"),
]);

export const emoteRowSchema = z.object({
  created_at: z.string(),
  emoji: z.string(),
  id: z.string(),
  is_pro: z.boolean(),
  name: z.string(),
  user_id: z.string().nullable(),
  visibility: emoteVisibilitySchema,
});

export const formRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
  status: formStatusSchema,
  user_id: z.string(),
});

export const userRowSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.string(),
  image: z.string().nullable(),
  membership: userMembershipSchema,
  name: z.string(),
});
